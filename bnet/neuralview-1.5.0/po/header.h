char* s = N_("Edit the selected data");
char* s = N_("Network connection rate");
char* s = N_("Number of epochs trained");
char* s = N_("New value");
char* s = N_("Othe_r");
char* s = N_("<i>Weight:</i> ");
char* s = N_("Scale _all");
char* s = N_("Data name");
char* s = N_("View graph");
char* s = N_("_Apply");
char* s = N_("Output type");
char* s = N_("Layer where the neuron is located");
char* s = N_("C");
char* s = N_("Activation functions");
char* s = N_("Training parameters");
char* s = N_("Batch");
char* s = N_("Momentum term");
char* s = N_("<b>Description:</b>");
char* s = N_("View snapshots of the network weights");
char* s = N_("The desired mean squared error / bit fail");
char* s = N_("Couldn't save the project");
char* s = N_("Value");
char* s = N_("_Max epochs");
char* s = N_("There aren't any weight snapshot to show");
char* s = N_("Map associations");
char* s = N_("_Quit");
char* s = N_("Nguyen-Widrow");
char* s = N_("Test network");
char* s = N_("Sparse");
char* s = N_("Generate report");
char* s = N_("_Maps");
char* s = N_("Data editor");
char* s = N_("Train the network");
char* s = N_("HTML page");
char* s = N_("Add-on name");
char* s = N_("_Project");
char* s = N_("Map name");
char* s = N_("Number of neurons per layer");
char* s = N_("_Copy");
char* s = N_("PNG image");
char* s = N_("Layer to set the activation function");
char* s = N_("View the graph of the network");
char* s = N_("View _Graph");
char* s = N_("Set the activation function for an entire layer");
char* s = N_("Neurons per layer");
char* s = N_("_Data Maps");
char* s = N_("_Exporter");
char* s = N_("Run a_ll");
char* s = N_("Save graph");
char* s = N_("Test the network using an existing data");
char* s = N_("_Weights");
char* s = N_("_Execution");
char* s = N_("Decrease factor of the connection weights");
char* s = N_("Per _layer");
char* s = N_("Learning momentum");
char* s = N_("No map");
char* s = N_("Sample description.\nMay have multiple lines.");
char* s = N_("_Topology");
char* s = N_("Test");
char* s = N_("_Run");
char* s = N_(".lua");
char* s = N_("Epochs between reports");
char* s = N_("Shu_ffle");
char* s = N_("The number of input/output neurons in the data doesn't matches the network.");
char* s = N_("Test result");
char* s = N_("SARPROP");
char* s = N_("Gaussian symmetric");
char* s = N_("Add a new row");
char* s = N_("Training");
char* s = N_("Select the spacing between layers");
char* s = N_("Test the network");
char* s = N_("Use the mean squared error as stop condition");
char* s = N_("S_pacing (%)");
char* s = N_("_Information");
char* s = N_("Lucas Hermann Negri");
char* s = N_("Delta max");
char* s = N_("Connection rate");
char* s = N_("Type");
char* s = N_("Create a copy of the selected data");
char* s = N_("Linear piece");
char* s = N_("_Cancel");
char* s = N_("Total neurons");
char* s = N_("Connection rate of the network");
char* s = N_("Remove the selected data");
char* s = N_("<i>To:</i> ");
char* s = N_("Sigmoid");
char* s = N_("%.4f to %.4f");
char* s = N_("Gaussian");
char* s = N_("Training status");
char* s = N_("Threshold symmetric");
char* s = N_("_Log epochs");
char* s = N_("_Add-ons");
char* s = N_("Sigmoid stepwise");
char* s = N_("Configure the activation functions");
char* s = N_("Couldn't render the plotting");
char* s = N_("Add a new data");
char* s = N_("Available maps");
char* s = N_("From");
char* s = N_("Apply the changes");
char* s = N_("_About");
char* s = N_("Delta min");
char* s = N_("_Neurons");
char* s = N_("Steepness");
char* s = N_("_Map");
char* s = N_("Add-on authors");
char* s = N_("Network type");
char* s = N_("Sample");
char* s = N_("Neuron to set the activation function");
char* s = N_("Total connections");
char* s = N_("Exports the neural network and\ngenerates a simple program to use it.");
char* s = N_("None");
char* s = N_("Close the project");
char* s = N_("Upper limit");
char* s = N_("Input#");
char* s = N_("Add a new interval point");
char* s = N_("_Description");
char* s = N_("View the loaded add-ons");
char* s = N_("<b>Author(s):</b>");
char* s = N_("_Layer");
char* s = N_("Couldn't save the project.");
char* s = N_("Step error shift");
char* s = N_("Factor that determines how aggressive the training should be");
char* s = N_("Increase/decrease factor of the step-size");
char* s = N_("Save project");
char* s = N_("Reporter");
char* s = N_("Initialize _Weights");
char* s = N_("Run the network for general inputs");
char* s = N_("Layer");
char* s = N_("Total number of connections in the network");
char* s = N_("The current project is not saved. Close it anyway?");
char* s = N_("Invalid network type ");
char* s = N_("Increase factor of the training step-size");
char* s = N_("Map");
char* s = N_("Add-on description");
char* s = N_("Te_st");
char* s = N_("Time elapsed (s)");
char* s = N_("Export project");
char* s = N_("_Remove");
char* s = N_("Bit fail");
char* s = N_("RPROP");
char* s = N_("_Import");
char* s = N_("SVG image");
char* s = N_("New data");
char* s = N_("Data manager");
char* s = N_("Create network");
char* s = N_("Range");
char* s = N_("Import a data from a file");
char* s = N_("_Parameters");
char* s = N_("Network topology");
char* s = N_("Add-ons");
char* s = N_("To");
char* s = N_("Confirmation");
char* s = N_("Neuron");
char* s = N_("Unloading sample");
char* s = N_("Bias per layer");
char* s = N_("Permanently remove <b>%s</b>?");
char* s = N_("_Bit fail limit");
char* s = N_("Open an existing project");
char* s = N_("Runs the network for all rows");
char* s = N_("Sample tooltip");
char* s = N_("_Rate %");
char* s = N_("Loading sample");
char* s = N_("Stop condition");
char* s = N_("Save the project");
char* s = N_("Incremental");
char* s = N_("Sample addon");
char* s = N_("Generate reports about the current project");
char* s = N_("<b>Add-on:</b>");
char* s = N_("Remove all hidden layers and added neurons");
char* s = N_("Linear piece symmetric");
char* s = N_("Decrease factor");
char* s = N_("_Fixed point");
char* s = N_("HTML");
char* s = N_("Epoch");
char* s = N_("Initialize the connection weights of the network");
char* s = N_("Use the bit fail as stop condition");
char* s = N_("_Edit");
char* s = N_("Cos symmetric");
char* s = N_("Bit fail limit");
char* s = N_("_Close");
char* s = N_("Remove the selected map");
char* s = N_("Stop function");
char* s = N_("Generates reports about the\ncurrent project.");
char* s = N_("Stops the training");
char* s = N_("Temperature");
char* s = N_("Save the network for external use");
char* s = N_("Edit the network topology");
char* s = N_("Couldn't export to %s");
char* s = N_("Selected training algorithm");
char* s = N_("Weight decay shift");
char* s = N_("SARPROP weight decay shift");
char* s = N_(", bias");
char* s = N_("Max");
char* s = N_("Configure the training parameters");
char* s = N_("Edit the selected map");
char* s = N_("No code");
char* s = N_("Lua");
char* s = N_("Scale the selected data between an interval");
char* s = N_("Export _type");
char* s = N_("Exporter");
char* s = N_("Per _neuron");
char* s = N_("<b>Connection details:</b>\n\n");
char* s = N_("Output");
char* s = N_(" (layer: %d, pos: %d%s)");
char* s = N_("Source layer to show the connections");
char* s = N_("Weight");
char* s = N_("Min");
char* s = N_("_Train");
char* s = N_("Set the connection weights to random values between a range");
char* s = N_("Classification");
char* s = N_("to");
char* s = N_("Initial value of the step-size");
char* s = N_("Initialize weights");
char* s = N_("Mu");
char* s = N_("View weights");
char* s = N_("Information");
char* s = N_("Standard");
char* s = N_("Weight snapshots");
char* s = N_("Scale _output");
char* s = N_("Scale _input");
char* s = N_("Mean squared error");
char* s = N_("Learning rate");
char* s = N_("If the network will be exported using fixed point numbers");
char* s = N_("Scale data");
char* s = N_("Function");
char* s = N_("_Training");
char* s = N_("Starts the training");
char* s = N_("Show _bias");
char* s = N_("_Start");
char* s = N_("Decrease factor of the step-size");
char* s = N_("View the connection weights of the network");
char* s = N_("_Type");
char* s = N_("The interval between logs (0 disables the logs)");
char* s = N_("Remove a hidden layer");
char* s = N_("Training _data");
char* s = N_("Quit from the application");
char* s = N_("The acceptable bit error");
char* s = N_("Hidden");
char* s = N_("Shortcut");
char* s = N_("Open project");
char* s = N_("Save the network graph");
char* s = N_("Desired _error");
char* s = N_("Training data to be used");
char* s = N_("The maximum number of epochs that the training can run");
char* s = N_("_New");
char* s = N_("Parameters");
char* s = N_("Input");
char* s = N_("Bit limit");
char* s = N_("0");
char* s = N_(".c");
char* s = N_("Ru_n");
char* s = N_("_Scale");
char* s = N_("There aren't any data to show");
char* s = N_("Toggles the bias neuron visualization");
char* s = N_("Run a copy of the selected data");
char* s = N_("Threshold");
char* s = N_("Training history");
char* s = N_("_Save");
char* s = N_("New map");
char* s = N_("Create a new project");
char* s = N_("Neural Network Simulator");
char* s = N_("View the plotting of the bit fail changes");
char* s = N_("Shuffle the rows of selected data");
char* s = N_("Sample clicked!");
char* s = N_("_MSE");
char* s = N_("Quickprop");
char* s = N_("Linear");
char* s = N_("Elapsed time");
char* s = N_("Elliot symmetric");
char* s = N_("Epochs");
char* s = N_("Sigmoid symmetric");
char* s = N_("Output#");
char* s = N_("Delta zero");
char* s = N_("Randomize");
char* s = N_("Activation function");
char* s = N_("Remove the selected interval points");
char* s = N_("_Bit");
char* s = N_("_Zoom (%)");
char* s = N_("Manage the data maps");
char* s = N_("Test data to be used");
char* s = N_("Test _data");
char* s = N_("_View Add-ons");
char* s = N_("Set the activation function for a single neuron");
char* s = N_("Remove the selected rows");
char* s = N_("SARPROP temperature");
char* s = N_("Sin symmetric");
char* s = N_("(Copy)");
char* s = N_("R_un");
char* s = N_("Couldn't load the project.");
char* s = N_("<i>From:</i> ");
char* s = N_("Increase factor");
char* s = N_("Minimum value of the step-size");
char* s = N_("Edit network");
char* s = N_("Map manager");
char* s = N_("Desired error");
char* s = N_("Add a new map");
char* s = N_("SARPROP step error threshold factor");
char* s = N_("Map editor");
char* s = N_("%s v%s");
char* s = N_("View the plotting of the mean squared error changes");
char* s = N_("View informations about the application");
char* s = N_("Step error threshold factor");
char* s = N_("Network connection type");
char* s = N_("Decay");
char* s = N_("Network runner");
char* s = N_("Snapshot");
char* s = N_("_Add");
char* s = N_("Maximum value of the step-size");
char* s = N_("Open training/test data");
char* s = N_("SARPROP step error shift");
char* s = N_("Invalid data");
char* s = N_("Max epochs");
char* s = N_("Data _Manager");
char* s = N_("Add a hidden layer");
char* s = N_("Set the connection weights according to the Nguyen-Widrow algorithm");
char* s = N_("Close the dialog");
char* s = N_("Activation _Functions");
char* s = N_("Manage the training / test data");
char* s = N_("Mean squared error history");
char* s = N_("Cos");
char* s = N_("View Weig_hts");
char* s = N_("Select the zoom level");
char* s = N_("Neurons");
char* s = N_("_Open");
char* s = N_("Runs the network for the selected rows");
char* s = N_("View add-ons");
char* s = N_("Res_et");
char* s = N_("Elliot");
char* s = N_("Sin");
char* s = N_("Toggle the map visualization");
char* s = N_("Invalid project");
char* s = N_("Total number of neurons in the network");
char* s = N_("Training algorithm");
char* s = N_("_Reporter");
char* s = N_("_Layers");
char* s = N_("Imported data");
char* s = N_("Number of bias neurons per layer");
char* s = N_("Algorithm");
char* s = N_("Activation function steepness");
